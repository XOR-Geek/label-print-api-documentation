{
  "basePath": "/",
  "definitions": {},
  "host": "dev.wacoa.jp",
  "info": {
    "description": "This is API documentation for the Labelprint System API. The API provides endpoints for adjusting label data and publishing news. The API requires authentication using a Bearer token. The API is hosted at `dev.wacoa.jp`.",
    "termsOfService": "/tos",
    "title": "Labelprint System API",
    "version": "0.0.1"
  },
  "paths": {
    "/api/adjust_label/get_data": {
      "get": {
        "description": "<br/>This endpoint receives a GET request with a user ID as a query parameter, <br/>verifies the authentication token, and fetches the adjustment data <br/>associated with the user ID from `adjust_service`.<br/><br/>Query Parameters:<br/>    - user_id (str): The ID of the user for whom adjustment data is requested.<br/><br/>Headers:<br/>    - Authorization (str): Bearer token to authenticate the user.<br/>    <br/>Returns:<br/><br/>    - 200 OK: JSON response with the adjustment data if retrieval is successful.<br/>    - 401 Unauthorized: JSON error message if the authorization token is <br/>      missing or invalid.<br/>    - 500 Internal Server Error: JSON error message with details if an <br/>      unexpected error occurs.  <br/>",
        "parameters": [
          {
            "description": "Bearer token to authenticate the user.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the user for whom adjustment data is requested.",
            "in": "query",
            "name": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Adjustment data retrieved successfully.",
            "schema": {
              "properties": {
                "data": {
                  "example": {
                    "adjustment_value": 5.75,
                    "description": "Adjustment for label printing error",
                    "label_id": "lbl_001"
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized – Missing or invalid authorization token.",
            "schema": {
              "properties": {
                "error": {
                  "example": "Unauthorized",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "properties": {
                "details": {
                  "type": "string"
                },
                "error": {
                  "example": "Internal Server Error",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Retrieves adjustment label data for a specified user.",
        "tags": [
          "Adjust"
        ]
      }
    },
    "/api/adjust_label/store": {
      "post": {
        "description": "<br/>This endpoint receives a POST request with adjustment data and saves it <br/>using `adjust_service.store_adjust_details` after verifying the <br/>authorization token.<br/><br/>Headers:<br/>    - Authorization (str): Bearer token to authenticate the user.<br/><br/>Returns:<br/><br/>    - 200 OK: JSON response with stored data if the operation is successful.<br/>    - 401 Unauthorized: JSON error message if the authorization token <br/>        is missing or invalid.<br/>    - 500 Internal Server Error: JSON error message with details if an <br/>        unexpected error occurs.<br/>",
        "parameters": [
          {
            "description": "Bearer token to authenticate the user.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The JSON payload containing the adjustment data.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "adjustment_value": {
                  "example": 5.75,
                  "type": "number"
                },
                "description": {
                  "example": "Adjustment for label printing error",
                  "type": "string"
                },
                "label_id": {
                  "example": "lbl_001",
                  "type": "string"
                }
              },
              "required": [
                "label_id",
                "adjustment_value"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data stored successfully.",
            "schema": {
              "properties": {
                "data": {
                  "type": "object"
                },
                "message": {
                  "example": "Data stored successfully",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized – Missing or invalid authorization token.",
            "schema": {
              "properties": {
                "error": {
                  "example": "Unauthorized",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "properties": {
                "details": {
                  "type": "string"
                },
                "error": {
                  "example": "Internal Server Error",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Stores adjustment label data in the database.",
        "tags": [
          "Adjust"
        ]
      }
    },
    "/api/get_reset_user_id": {
      "get": {
        "description": "<br/>It retrieves the JSON data from the request, which should <br/>contain a one-time reset URL, and calls the <br/>`user_reset_password_mail` method to process the password reset <br/>functionality.<br/><br/>",
        "parameters": [
          {
            "description": "The one-time reset URL identifier for initiating the password reset process.",
            "in": "query",
            "name": "url_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset email sent successfully.",
            "schema": {
              "properties": {
                "message": {
                  "example": "Password reset email sent successfully.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request – If the reset URL is invalid or malformed.",
            "schema": {
              "properties": {
                "error": {
                  "example": "Invalid reset URL.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Not Found – If the reset URL does not correspond to any user.",
            "schema": {
              "properties": {
                "error": {
                  "example": "Reset URL not found.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error – Unexpected error during the password reset process.",
            "schema": {
              "properties": {
                "details": {
                  "example": "An unexpected error occurred while sending the password reset email.",
                  "type": "string"
                },
                "error": {
                  "example": "Internal Server Error.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "Endpoint for sending a password reset email.",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/login": {
      "post": {
        "description": "<br/>This route accepts a JSON object containing user credentials and returns a token <br/>along with the user record if the authentication is successful.<br/>     <br/>",
        "parameters": [
          {
            "description": "The JSON payload containing the login data.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "LOGIN_ID": {
                  "example": "user_123",
                  "type": "string"
                },
                "PASSWORD": {
                  "example": "securepassword",
                  "type": "string"
                }
              },
              "required": [
                "LOGIN_ID",
                "PASSWORD"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful login response.",
            "schema": {
              "properties": {
                "Authorization": {
                  "example": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                  "type": "string"
                },
                "message": {
                  "example": "Login successful",
                  "type": "string"
                },
                "user_record": {
                  "properties": {
                    "user_id": {
                      "example": "user_123",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized – Invalid credentials.",
            "schema": {
              "properties": {
                "error": {
                  "example": "Invalid user ID or password",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "properties": {
                "details": {
                  "example": "Unexpected error during authentication",
                  "type": "string"
                },
                "error": {
                  "example": "Internal Server Error",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Authenticates a user and logs them in.",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/logout": {
      "post": {
        "description": "<br/>This endpoint handles the POST request for user logout. It retrieves the user's authentication <br/>token from the request headers, verifies the token, and calls the `user_logout` method to <br/>remove the token from the user's record in Firestore.<br/><br/>",
        "parameters": [
          {
            "description": "Bearer token for authenticating the user.",
            "in": "header",
            "name": "Authorization",
            "required": false,
            "type": "string"
          },
          {
            "description": "The JSON payload containing the user information for logout.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "user_id": {
                  "example": "user_123",
                  "type": "string"
                }
              },
              "required": [
                "user_id"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful.",
            "schema": {
              "properties": {
                "message": {
                  "example": "Logout successful.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error – Unexpected error during logout.",
            "schema": {
              "properties": {
                "details": {
                  "example": "An unexpected error occurred during logout.",
                  "type": "string"
                },
                "error": {
                  "example": "Internal Server Error",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Logs out a user by removing their authentication token from the server.",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/password_reset": {
      "post": {
        "description": "<br/>This endpoint handles the password reset process by accepting a JSON payload<br/>containing user identification and new password information. It processes the<br/>request and returns an appropriate response indicating the outcome of the <br/>password reset attempt.<br/><br/>",
        "parameters": [
          {
            "description": "The JSON payload containing user ID and new password information.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "confirm_password": {
                  "example": "newPassword123",
                  "type": "string"
                },
                "new_password": {
                  "example": "newPassword123",
                  "type": "string"
                },
                "user_id": {
                  "example": "user_123",
                  "type": "string"
                }
              },
              "required": [
                "user_id",
                "new_password",
                "confirm_password"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset successfully.",
            "schema": {
              "properties": {
                "message": {
                  "example": "Password reset successfully.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request – If the passwords do not match or other validation fails.",
            "schema": {
              "properties": {
                "error": {
                  "example": "Passwords do not match.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error – Unexpected error during password reset.",
            "schema": {
              "properties": {
                "details": {
                  "example": "An unexpected error occurred during the password reset process.",
                  "type": "string"
                },
                "error": {
                  "example": "Internal Server Error",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "Reset the password for a user.",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/password_reset_store": {
      "post": {
        "description": "<br/>This endpoint handles the password reset process by accepting a JSON payload<br/>containing user identification and new password information. It processes the<br/>request and returns an appropriate response indicating the outcome of the <br/>password reset attempt.<br/>",
        "parameters": [
          {
            "description": "The JSON payload containing user ID and new password information.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "confirm_password": {
                  "example": "newPassword123",
                  "type": "string"
                },
                "new_password": {
                  "example": "newPassword123",
                  "type": "string"
                },
                "user_id": {
                  "example": "user_123",
                  "type": "string"
                }
              },
              "required": [
                "user_id",
                "new_password",
                "confirm_password"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password successfully updated.",
            "schema": {
              "properties": {
                "message": {
                  "example": "Password successfully reset.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request – If the provided data is invalid, such as mismatched passwords or missing fields.",
            "schema": {
              "properties": {
                "error": {
                  "example": "Password and confirmation do not match.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error – Unexpected error during the password reset process.",
            "schema": {
              "properties": {
                "details": {
                  "example": "Internal server error during password reset.",
                  "type": "string"
                },
                "error": {
                  "example": "An unexpected error occurred while resetting the password.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "Reset the password for a user.",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/password_update": {
      "post": {
        "description": "<br/>This endpoint allows a logged-in user to update their password. It verifies the <br/>user's authorization token, processes the password update request, and returns <br/>the appropriate response based on the success or failure of the operation. <br/><br/>",
        "parameters": [
          {
            "description": "Bearer token for authenticating the user.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The JSON payload containing the new password data.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "confirm_password": {
                  "example": "newpassword456",
                  "type": "string"
                },
                "current_password": {
                  "example": "oldpassword123",
                  "type": "string"
                },
                "new_password": {
                  "example": "newpassword456",
                  "type": "string"
                },
                "password_hint": {
                  "example": "Hint for the new password",
                  "type": "string"
                },
                "shinsei_user_id": {
                  "example": "user_123",
                  "type": "string"
                }
              },
              "required": [
                "shinsei_user_id",
                "current_password",
                "new_password",
                "confirm_password"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password updated successfully.",
            "schema": {
              "properties": {
                "message": {
                  "example": "Password updated successfully.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized – Invalid authorization token.",
            "schema": {
              "properties": {
                "error": {
                  "example": "Unauthorized – Invalid token.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error – Unexpected error.",
            "schema": {
              "properties": {
                "details": {
                  "example": "An unexpected error occurred while updating the password.",
                  "type": "string"
                },
                "error": {
                  "example": "Internal Server Error",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Updates a user's password.",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/publish_news": {
      "get": {
        "description": "<br/>This endpoint retrieves the necessary information for creating and publishing news.<br/><br/><br/>Responses:<br/>    - 200 OK: Returns a JSON object containing the data required for publishing news.<br/>    - 500 Internal Server Error: If there is an unexpected error during processing.<br/><br/> ",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "description": "The publish news data.",
                      "example": {
                        "content": "Details about the breaking news...",
                        "headline": "Breaking News!"
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "A JSON object containing the data required for publishing news."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "details": {
                      "example": "Detailed error message if available.",
                      "type": "string"
                    },
                    "error": {
                      "example": "Internal Server Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Internal Server Error. An unexpected error occurred during processing."
          }
        },
        "summary": "Fetch data required for publishing news.",
        "tags": [
          "News"
        ]
      }
    },
    "/api/reset_password_link": {
      "post": {
        "description": "<br/>This route handles POST requests containing a login ID. It retrieves the login ID from the request data,<br/>invokes the `user_reset_password_link` method to generate and send a password reset link to the user's email,<br/>and returns the appropriate response to the client.<br/><br/>",
        "parameters": [
          {
            "description": "The JSON payload containing the login ID for password reset.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "LOGIN_ID": {
                  "example": "user_123",
                  "type": "string"
                }
              },
              "required": [
                "LOGIN_ID"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset link sent successfully.",
            "schema": {
              "properties": {
                "message": {
                  "example": "Password reset link sent successfully.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error – Unexpected error during password reset.",
            "schema": {
              "properties": {
                "details": {
                  "example": "An unexpected error occurred while sending the reset link.",
                  "type": "string"
                },
                "error": {
                  "example": "Internal Server Error",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "Endpoint to initiate a password reset process by sending a reset link to the user's email.",
        "tags": [
          "Authentication"
        ]
      }
    }
  },
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "BearerAuth": {
      "description": "Enter your Bearer token as `Bearer <your_token>`",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "swagger": "2.0"
}
